---
meta: {component: mappings, edition: ecommerce, language: ALL, version: '1.20'}
suits:
- cards:
  - capec: [54, 541]
    cre: [743-110]
    description: Brian can gather information about the underlying configurations,
      schemas, logic, code, software, services and infrastructure due to the content
      of error messages, or poor configuration, or the presence of default installation
      files or old, test, backup or copies of resources, or exposure of source code
    owasp_appsensor: [HT1-3]
    owasp_asvs: [1.1, 4.5, 8.1, 11.5, 19.1, 19.5]
    owasp_scp: [69, 107, 108, 109, 136, 137, 153, 156, 158, 162]
    safecode: [4, 23]
    value: '2'
  - capec: [28, 48, 126, 165, 213, 220, 221, 261, 262, 271, 272]
    cre: [010-308]
    description: Robert can input malicious data because the allowed protocol format
      is not being checked, or duplicates are accepted, or the structure is not being
      verified, or the individual data elements are not being validated for format,
      type, range, length and a whitelist of allowed characters or formats
    owasp_appsensor: [RE7-8, AE4-7, IE2-3, CIE1, CIE3-4, HT1-3]
    owasp_asvs: [5.1, 5.16, 5.17, 5.18, 5.19, 5.2, 11.1, 11.2]
    owasp_scp: []
    safecode: [3, 16, 24, 35]
    value: '3'
  - capec: [28, 31, 48, 126, 162, 165, 213, 220, 221, 261]
    cre: [503-455,TODO: too generic, maybe 010-308?] 
    description: Dave can input malicious field names or data because it is not being
      checked within the context of the current user and process
    owasp_appsensor: [RE3-6, AE8-11, SE1, SE3-6, IE2-4, HT1-3]
    owasp_asvs: [4.16, 5.16, 5.17, 15.1]
    owasp_scp: [8, 10, 183]
    safecode: [24, 35]
    value: '4'
  - capec: [28, 31, 152, 160, 468]
    cre: [161-451]
    description: Jee can bypass the centralized encoding routines since they are not
      being used everywhere, or the wrong encodings are being used
    owasp_appsensor: []
    owasp_asvs: [1.7, 5.15, 5.21, 5.22, 5.23]
    owasp_scp: [3, 15, 18, 19, 20, 21, 22, 168]
    safecode: [2, 17]
    value: '5'
  - capec: [28]
    cre: [848-711]
    description: Jason can bypass the centralized validation routines since they are
      not being used on all inputs
    owasp_appsensor: [IE2-3]
    owasp_asvs: [1.7, 5.6, 5.19]
    owasp_scp: [3, 168]
    safecode: [3, 16, 24]
    value: '6'
  - capec: [28, 153, 165]
    cre: [TODO: missing CRE 'Normalize all input before validating' child of CRE 503-455 - >>Input and output verification]
    description: Jan can craft special payloads to foil input validation because the
      character set is not specified/enforced, or the data is encoded multiple times,
      or the data is not fully converted into the same format the application uses
      (e.g. canonicalization) before being validated, or variables are not strongly
      typed
    owasp_appsensor: [IE2-3, EE1-2]
    owasp_asvs: [5.6, 11.8]
    owasp_scp: [4, 5, 7, 150]
    safecode: [3, 16, 24]
    value: '7'
  - capec: [28, 31, 152, 160, 468]
    cre: [764-765]
    description: Sarah can bypass the centralized sanitization routines since they
      are not being used comprehensively
    owasp_appsensor: []
    owasp_asvs: [1.7, 5.21, 5.23]
    owasp_scp: [15, 169]
    safecode: [2, 17]
    value: '8'
  - capec: [28]
    cre: [118-602]
    description: Shamun can bypass input validation or output validation checks because
      validation failures are not rejected and/or sanitized
    owasp_appsensor: [IE2-3]
    owasp_asvs: [5.3]
    owasp_scp: [6, 21, 22, 168]
    safecode: [3, 16, 24]
    value: '9'
  - capec: [12, 51, 57, 90, 111, 145, 194, 195, 202, 218, 463]
    cre: [650-560,640-364]
    description: "Dar\xEDo can exploit the trust the application places in a source\
      \ of data (e.g. user-definable data, manipulation of locally stored data, alteration\
      \ to state data on a client device, lack of verification of identity during\
      \ data validation such as Dar\xEDo can pretend to be Colin)"
    owasp_appsensor: [IE4, IE5]
    owasp_asvs: [5.19, 10.6, 16.2, 16.3, 16.4, 16.5, 16.8]
    owasp_scp: [2, 19, 92, 95, 180]
    safecode: [14]
    value: '10'
  - capec: [87, 207, 554]
    cre: [848-711]
    description: Dennis has control over input validation, output validation or output
      encoding code or routines so they can be bypassed
    owasp_appsensor: [RE3, RE4]
    owasp_asvs: [5.5, 5.18]
    owasp_scp: [1, 17]
    safecode: [2, 17]
    value: J
  - capec: [28, 31, 152, 160, 468]
    cre: [161-451]
    description: Geoff can inject data into a client or device side interpreter because
      a parameterised interface is not being used, or has not been implemented correctly,
      or the data has not been encoded correctly for the context, or there is no restrictive
      policy on code or data includes
    owasp_appsensor: [IE1, RP3]
    owasp_asvs: [5.15, 5.22, 5.23, 5.24, 5.25]
    owasp_scp: [10, 15, 16, 19, 20]
    safecode: [2, 17]
    value: Q
  - capec: [23, 28, 76, 152, 160, 261]
    cre: [ "TODO: we are missing Server Side Injection which is a parent of the below", 664-080, 675-168, 612-252, 368-633, 737-086, 653-242, 316-272,
      480-071, 268-272, 540-566, 146-706, 443-447, 031-447, 624-716, 405-411, 082-327,
      166-151]
    description: Gabe can inject data into an server-side interpreter (e.g. SQL, OS
      commands, Xpath, Server JavaScript, SMTP) because a strongly typed parameterised
      interface is not being used or has not been implemented correctly
    owasp_appsensor: [CIE1, CIE2]
    owasp_asvs: [5.1, 5.11, 5.12, 5.13, 5.14, 5.16, 5.21]
    owasp_scp: [15, 19, 20, 21, 22, 167, 180, 204, 211, 212]
    safecode: [2, 19, 20]
    value: K
  name: Data validation & encoding
- cards:
  - capec: []
    cre: [138-448]
    description: 'James can undertake authentication functions without the real user
      ever being aware this has occurred (e.g. attempt to log in, log in with stolen
      credentials, reset the password) '
    owasp_appsensor: [UT1]
    owasp_asvs: [2.12, 8.4, 8.1]
    owasp_scp: [47, 52]
    safecode: [28]
    value: '2'
  - capec: [37, 546]
    cre: [117-371, 757-271, 715-304, 224-321, 473-758, 412-561, 267-468, 482-866]
    description: Muhammad can obtain a user's password or other secrets such as security
      questions, by observation during entry, or from a local cache, or from memory,
      or in transit, or by reading it from some unprotected location, or because it
      is widely known, or because it never expires, or because the user cannot change
      her own password
    owasp_appsensor: []
    owasp_asvs: [2.2, 2.17, 2.24, 8.7, 9.1, 9.4, 9.5, 9.9, 9.11]
    owasp_scp: [36, 37, 40, 43, 48, 51, 119, 139, 140, 146]
    safecode: [28]
    value: '3'
  - capec: [383]
    cre: [224-321, 558-807, 527-034, 152-725, 745-045, 201-246, 636-854, 267-468,
      848-711, 640-364, 186-540, 650-560, 482-866]
    description: Sebastien can easily identify user names or can enumerate them
    owasp_appsensor: [AE1]
    owasp_asvs: [2.18, 2.28]
    owasp_scp: [33, 53]
    safecode: [28]
    value: '4'
  - capec: [70]
    cre: [774-888, 553-413, 604-025, 525-361, 630-577, 158-874, 103-707, 576-651,
      101-217, 358-860, 807-565, 340-375, 333-858, 338-370, 524-446, 715-681, 551-054,
      027-555, 076-470, 487-305]
    description: Javier can use default, test or easily guessable credentials to authenticate,
      or can use an old account or an account not necessary for the application
    owasp_appsensor: [AE12, HT3]
    owasp_asvs: [2.19]
    owasp_scp: [54, 175, 178]
    safecode: [28]
    value: '5'
  - capec: [50]
    cre: [581-525,"TODO: maybe a better fit would be a CRE: 'temporary credential handling' with 581-525 and all of those https://www.opencre.org/node/standard/Cheat_sheets/section/Forgot%20Password%20Cheat%20Sheet as a child"]
    description: Sven can reuse a temporary password because the user does not have
      to change it on first use, or it has too long or no expiry, or it does not use
      an out-of-band delivery method (e.g. post, mobile app, SMS)
    owasp_appsensor: []
    owasp_asvs: [2.22]
    owasp_scp: [37, 45, 46, 178]
    safecode: [28]
    value: '6'
  - capec: [2, 16]
    cre: [270-568]
    description: Cecilia can use brute force and dictionary attacks against one or
      many accounts without limit, or these attacks are simplified due to insufficient
      complexity, length, expiration and re-use requirements for passwords
    owasp_appsensor: [AE2, AE3]
    owasp_asvs: [2.7, 2.2, 2.23, 2.25, 2.27]
    owasp_scp: [33, 38, 39, 41, 50, 53]
    safecode: [27]
    value: '7'
  - capec: [115]
    cre: [166-151]
    description: Kate can bypass authentication because it does not fail secure (i.e.
      it defaults to allowing unauthenticated access)
    owasp_appsensor: []
    owasp_asvs: [2.6]
    owasp_scp: [28]
    safecode: [28]
    value: '8'
  - capec: [21]
    cre: [258-115,582-541]
    description: Claudia can undertake more critical functions because authentication
      requirements are too weak (e.g. do not use strong authentication such as two
      factor), or there is no requirement to re-authenticate for these
    owasp_appsensor: []
    owasp_asvs: [2.1, 2.9, 2.26, 2.31, 4.15]
    owasp_scp: [55, 56]
    safecode: [14, 28]
    value: '9'
  - capec: [90, 115]
    cre: [113-133]
    description: Pravin can bypass authentication controls because a centralized standard,
      tested, proven and approved authentication module/framework/service, separate
      to the resource being requested, is not being used
    owasp_appsensor: []
    owasp_asvs: [1.7, 2.3]
    owasp_scp: [25, 26, 27]
    safecode: [14, 28]
    value: '10'
  - capec: [115]
    cre: [146-556]
    description: Mark can access resources or services because there is no authentication
      requirement, or it was mistakenly assumed authentication would be undertaken
      by some other system or performed in some previous action
    owasp_appsensor: []
    owasp_asvs: [2.1]
    owasp_scp: [23, 32, 34]
    safecode: [14, 28]
    value: J
  - capec: [36, 50, 115, 121, 179]
    cre: [146-556]
    description: Jaime can bypass authentication because it is not enforced with equal
      rigor for all types of authentication functionality (e.g. register, password
      change, password recovery, log out, administration) or across all versions/channels
      (e.g. mobile website, mobile app, full website, API, call centre)
    owasp_appsensor: []
    owasp_asvs: [2.1, 2.8]
    owasp_scp: [23, 29, 42, 49]
    safecode: [14, 28]
    value: Q
  - capec: [115, 207, 554]
    cre: [TODO: we need an Authentication bypass tag that groups together CREs https://www.opencre.org/node/standard/CAPEC/section/115]
    description: Olga can influence or alter authentication code/routines so they
      can be bypassed
    owasp_appsensor: []
    owasp_asvs: [2.4, 13.2]
    owasp_scp: [24]
    safecode: [14, 28]
    value: K
  name: Authentication
- cards:
  - capec: [31, 60, 61]
    cre: [114-277, 470-731, TODO: both need to be linked to standards]
    description: William has control over the generation of session identifiers
    owasp_appsensor: [SE2]
    owasp_asvs: [3.1]
    owasp_scp: [58, 59]
    safecode: [28]
    value: '2'
  - capec: []
    cre: [TODO: missing CRE? although this seems like a redundant card]
    description: Ryan can use a single account in parallel since concurrent sessions
      are allowed
    owasp_appsensor: []
    owasp_asvs: [3.16, 3.17, 3.18]
    owasp_scp: [68]
    safecode: [28]
    value: '3'
  - capec: [31, 61]
    cre: [110-531, TODO: create CRE, child of this one with the Domain requirement]
    description: Alison can set session identification cookies on another web application
      because the domain and path are not restricted sufficiently
    owasp_appsensor: [SE2]
    owasp_asvs: [3.12]
    owasp_scp: [59, 61]
    safecode: [28]
    value: '4'
  - capec: [31]
    cre: [002-630,582-541]
    description: John can predict or guess session identifiers because they are not
      changed when the user's role alters (e.g. pre and post authentication) and when
      switching between non-encrypted and encrypted communications, or are not sufficiently
      long and random, or are not changed periodically
    owasp_appsensor: [SE4-6]
    owasp_asvs: [3.2, 3.7, 3.11]
    owasp_scp: [60, 62, 66, 67, 71, 72]
    safecode: [28]
    value: '5'
  - capec: [21]
    cre: [470-731,065-782]
    description: Gary can take over a user's session because there is a long or no
      inactivity timeout, or a long or no overall session time limit, or the same
      session can be used from more than one device/location
    owasp_appsensor: [SE5, SE6]
    owasp_asvs: [3.3, 3.4, 3.16, 3.17, 3.18]
    owasp_scp: [64, 65]
    safecode: [28]
    value: '6'
  - capec: [21]
    cre: [457-165]
    description: Casey can utilize Adam's session after he has finished, because there
      is no log out function, or he cannot easily log out, or log out does not properly
      terminate the session
    owasp_appsensor: []
    owasp_asvs: [3.2, 3.5]
    owasp_scp: [62, 63]
    safecode: [28]
    value: '7'
  - capec: [21]
    cre: [258-115,065-782]
    description: Matt can abuse long sessions because the application does not require
      periodic re-authentication to check if privileges have changed
    owasp_appsensor: []
    owasp_asvs: []
    owasp_scp: [96]
    safecode: [28]
    value: '8'
  - capec: [31, 60]
    cre: [177-260, TODO: ideally, we'd have a "secure session token cre that contains all relevant cres"]
    description: Ivan can steal session identifiers because they are sent over insecure
      channels, or are logged, or are revealed in error messages, or are included
      in URLs, or are accessible un-necessarily by code which the attacker can influence
      or alter
    owasp_appsensor: [SE4-6]
    owasp_asvs: [3.6, 8.7, 10.3]
    owasp_scp: [69, 75, 76, 119, 138]
    safecode: [28]
    value: '9'
  - capec: [62, 111]
    cre: [060-472, "TODO: this needs to split in USE CSRF, USE anti-automation"]
    description: Marce can forge requests because per-session, or per-request for
      more critical actions, strong random tokens (i.e. anti-CSRF tokens) or similar
      are not being used for actions that change state
    owasp_appsensor: [IE4]
    owasp_asvs: [4.13]
    owasp_scp: [73, 74]
    safecode: [18]
    value: '10'
  - capec: [60]
    cre: [TODO: missing CRE related to action repeatability]
    description: Jeff can resend an identical repeat interaction (e.g. HTTP request,
      signal, button press) and it is accepted, not rejected
    owasp_appsensor: [IE5]
    owasp_asvs: [15.1, 15.2]
    owasp_scp: []
    safecode: [12, 14]
    value: J
  - capec: [21]
    cre: [TODO: do we really need to create a  cre: "consistently apply session controls"? ]
    description: Salim can bypass session management because it is not applied comprehensively
      and consistently across the application
    owasp_appsensor: []
    owasp_asvs: [3.1]
    owasp_scp: [58]
    safecode: [14, 28]
    value: Q
  - capec: [21]
    cre: [TODO: missing?]
    description: Peter can bypass the session management controls because they have
      been self-built and/or are weak, instead of using a standard framework or approved
      tested module
    owasp_appsensor: []
    owasp_asvs: [1.7]
    owasp_scp: [58, 60]
    safecode: [14, 28]
    value: K
  name: Session management
- cards:
  - capec: [153]
    cre: [657-084]
    description: Tim can influence where data is sent or forwarded to
    owasp_appsensor: []
    owasp_asvs: [4.1, 4.16, 16.1]
    owasp_scp: [44]
    safecode: [8, 10, 11]
    value: '2'
  - capec: [69, 213]
    cre: [330-281]
    description: Christian can access information, which they should not have permission
      to, through another mechanism that does have permission (e.g. search indexer,
      logger, reporting), or because it is cached, or kept for longer than necessary,
      or other information leakage
    owasp_appsensor: []
    owasp_asvs: [4.1, 8.2, 9.1-9.6, 9.11, 16.6-16.7]
    owasp_scp: [51, 100, 135, 139, 140, 141, 150]
    safecode: [8, 10, 11]
    value: '3'
  - capec: [122]
    cre: [284-521]
    description: Kelly can bypass authorization controls because they do not fail
      securely (i.e. they default to allowing access)
    owasp_appsensor: []
    owasp_asvs: [4.8]
    owasp_scp: [79, 80]
    safecode: [8, 10, 11]
    value: '4'
  - capec: [75, 87, 95, 126, 149, 155, 203, 213, 264, 265]
    cre: [657-084,152-725]
    description: Chad can access resources (including services, processes, AJAX, Flash,
      video, images, documents, temporary files, session data, system properties,
      configuration data, registry settings, logs) he should not be able to due to
      missing authorization, or due to excessive privileges (e.g. not using the principle
      of least privilege
    owasp_appsensor: [ACE1, ACE2, ACE3, ACE4, HT2]
    owasp_asvs: [4.1, 4.4, 4.9, 19.3]
    owasp_scp: [70, 81, 83-4, 87-9, 99, 117, 131-2, 142, 154, 170, 179]
    safecode: [8, 10, 11, 13]
    value: '5'
  - capec: [122]
    cre: [284-521]
    description: Eduardo can access data he does not have permission to, even though
      he has permission to the form/page/URL/entry point
    owasp_appsensor: [ACE1-4]
    owasp_asvs: [4.1, 4.4]
    owasp_scp: [81, 88, 131]
    safecode: [8, 10, 11]
    value: '6'
  - capec: [122]
    cre: [284-521]
    description: Yuanjing can access application functions, objects, or properties
      he is not authorized to access
    owasp_appsensor: [ACE1-4]
    owasp_asvs: [4.1, 4.4]
    owasp_scp: [81, 85, 86, 131]
    safecode: [8, 10, 11]
    value: '7'
  - capec: [25, 39, 74, 162, 166, 207]
    cre: [TODO: apply authentication consistently?]
    description: Tom can bypass business rules by altering the usual process sequence
      or flow, or by undertaking the process in the incorrect order, or by manipulating
      date and time values used by the application, or by using valid features for
      unintended purposes, or by otherwise manipulating control data
    owasp_appsensor: [ACE3]
    owasp_asvs: [4.1, 4.15, 4.16, 8.13, 15.1]
    owasp_scp: [10, 32, 93, 94, 189]
    safecode: [8, 10, 11, 12]
    value: '8'
  - capec: [26, 29, 119, 261]
    cre: [854-643]
    description: Mike can misuse an application by using a valid feature too fast,
      or too frequently, or other way that is not intended, or consumes the application's
      resources, or causes race conditions, or over-utilizes a feature
    owasp_appsensor: [AE3, FIO1-2, UT2-4, STE1-3]
    owasp_asvs: [4.14, 15.2]
    owasp_scp: [94]
    safecode: [1, 35]
    value: '9'
  - capec: [36, 95, 121, 179]
    cre: [146-556, 746-705]
    description: Richard can bypass the centralized authorization controls since they
      are not being used comprehensively on all interactions
    owasp_appsensor: [ACE1-4]
    owasp_asvs: [1.7, 4.11]
    owasp_scp: [78, 91]
    safecode: [8, 10, 11]
    value: '10'
  - capec: [75, 133, 203]
    cre: [308-515]
    description: Dinis can access security configuration information, or access control
      lists
    owasp_appsensor: []
    owasp_asvs: [4.1, 13.2]
    owasp_scp: [89, 90]
    safecode: [8, 10, 11]
    value: J
  - capec: [17, 30, 69, 234]
    cre: [857-718]
    description: Christopher can inject a command that the application will run at
      a higher privilege level
    owasp_appsensor: []
    owasp_asvs: [5.12]
    owasp_scp: [209]
    safecode: [8, 10, 11]
    value: Q
  - capec: [207, 554]
    cre: [TODO: ???]
    description: Ryan can influence or alter authorization controls and permissions,
      and can therefore bypass them
    owasp_appsensor: []
    owasp_asvs: [4.9, 4.1, 13.2]
    owasp_scp: [77, 89, 91]
    safecode: [8, 10, 11]
    value: K
  name: Authorization
- cards:
  - capec: []
    cre: [504-340]
    description: Kyun can access data because it has been obfuscated rather than using
      an approved cryptographic function
    owasp_appsensor: []
    owasp_asvs: []
    owasp_scp: [105, 133, 135]
    safecode: [21, 29]
    value: '2'
  - capec: [31, 39, 68, 75, 133, 145, 162, 203, 438, 439, 442]
    cre: [TODO: cre about checksums]
    description: Axel can modify transient or permanent data (stored or in transit),
      or source code, or updates/patches, or configuration data, because it is not
      subject to integrity checking
    owasp_appsensor: [SE1, IE4]
    owasp_asvs: [8.11, 11.7, 13.2, 19.5, 19.6, 19.7, 19.8]
    owasp_scp: [92, 205, 212]
    safecode: [12, 14]
    value: '3'
  - capec: [185, 186, 187]
    cre: [TODO: cre about encrypting sensitive data in transit, a parent of 270-634]
    description: Paulo can access data in transit that is not encrypted, even though
      the channel is encrypted
    owasp_appsensor: []
    owasp_asvs: [7.12, 9.2]
    owasp_scp: [37, 88, 143, 214]
    safecode: [14, 29, 30]
    value: '4'
  - capec: []
    cre: [036-810]
    description: Kyle can bypass cryptographic controls because they do not fail securely
      (i.e. they default to unprotected)
    owasp_appsensor: []
    owasp_asvs: [7.2, 10.3]
    owasp_scp: [103, 145]
    safecode: [21, 29]
    value: '5'
  - capec: [31, 57, 102, 157, 158, 384, 466, 546]
    cre: [TODO: what?]
    description: Romain can read and modify unencrypted data in memory or in transit
      (e.g. cryptographic secrets, credentials, session identifiers, personal and
      commercially-sensitive data), in use or in communications within the application,
      or between the application and users, or between the application and external
      systems
    owasp_appsensor: []
    owasp_asvs: [2.16, 9.2, 9.11, 10.3, 19.2]
    owasp_scp: [36, 37, 143, 146, 147]
    safecode: [29]
    value: '6'
  - capec: [31, 216]
    cre: [TODO: too broad, includes certs, configuration, revocation etc]
    description: Gunter can intercept or modify encrypted data in transit because
      the protocol is poorly deployed, or weakly configured, or certificates are invalid,
      or certificates are not trusted, or the connection can be degraded to a weaker
      or un-encrypted communication
    owasp_appsensor: [IE4]
    owasp_asvs: [10.1, 10.5, 10.1, 10.11, 10.12, 10.13, 10.14]
    owasp_scp: [75, 144, 145, 148]
    safecode: [14, 29, 30]
    value: '7'
  - capec: [31, 37, 55]
    cre: [726-668]
    description: Eoin can access stored business data (e.g. passwords, session identifiers,
      PII, cardholder data) because it is not securely encrypted or securely hashed
    owasp_appsensor: []
    owasp_asvs: [2.13, 7.7, 7.8, 9.2]
    owasp_scp: [30, 31, 70, 133, 135]
    safecode: [21, 29, 31]
    value: '8'
  - capec: [97]
    cre: []
    description: Andy can bypass random number generation, random GUID generation,
      hashing and encryption functions because they have been self-built and/or are
      weak
    owasp_appsensor: []
    owasp_asvs: [7.6, 7.7, 7.8, 7.15]
    owasp_scp: [60, 104, 105]
    safecode: [14, 21, 29, 32, 33]
    value: '9'
  - capec: [97, 463]
    cre: [TODO: need CRE about key strength]
    description: Susanna can break the cryptography in use because it is not strong
      enough for the degree of protection required, or it is not strong enough for
      the amount of effort the attacker is willing to make
    owasp_appsensor: []
    owasp_asvs: []
    owasp_scp: [104, 105]
    safecode: [14, 21, 29, 31, 32, 33]
    value: '10'
  - capec: [116]
    cre: [223-780]
    description: Justin can read credentials for accessing internal or external resources,
      services and others systems because they are stored in an unencrypted format,
      or saved in the source code
    owasp_appsensor: []
    owasp_asvs: [2.29]
    owasp_scp: [35, 90, 171, 172]
    safecode: [21, 29]
    value: J
  - capec: [116, 117]
    cre: [223-780]
    description: Randolph can access or predict the master cryptographic secrets
    owasp_appsensor: []
    owasp_asvs: [7.8, 7.9, 7.11, 7.13, 7.14]
    owasp_scp: [35, 102]
    safecode: [21, 29]
    value: Q
  - capec: [207, 554]
    cre: [TODO: ??? business logic?]
    description: Dan can influence or alter cryptography code/routines (encryption,
      hashing, digital signatures, random number and GUID generation) and can therefore
      bypass them
    owasp_appsensor: []
    owasp_asvs: [7.11]
    owasp_scp: [31, 101]
    safecode: [14, 21, 29]
    value: K
  name: Cryptography

- cards:
  - capec: [25, 26, 29, 96, 123, 124, 128, 129, 264, 265]
    cre: [724-770]
    description: Lee can bypass application controls because dangerous/risky programming
      language functions have been used instead of safer alternatives, or there are
      type conversion errors, or because the application is unreliable when an external
      resource is unavailable, or there are race conditions, or there are resource
      initialization or allocation issues, or overflows can occur
    owasp_appsensor: []
    owasp_asvs: [5.1]
    owasp_scp: [194, 195, 196, 197, 198, 199, 200, 201, 202, 205, 206, 207, 208, 209]
    safecode: [3, 5, 6, 7, 9, 22, 25, 26, 34]
    value: '2'
  - capec: [189, 207]
    cre: ["TODO: missing CRE 'application logic disclosure' child of CRE info disclosure"]
    description: Andrew can access source code, or decompile, or otherwise access
      business logic to understand how the application works and any secrets contained
    owasp_appsensor: []
    owasp_asvs: [19.5]
    owasp_scp: [134]
    safecode: []
    value: '3'
  - capec: []
    cre: [184-284]
    description: Keith can perform an action and it is not possible to attribute it
      to him
    owasp_appsensor: []
    owasp_asvs: [8.1]
    owasp_scp: [23, 32, 34, 42, 51, 181]
    safecode: []
    value: '4'
  - capec: [89, 103, 181, 459]
    cre: ["TODO: what?"]
    description: Larry can influence the trust other parties including users have
      in the application, or abuse that trust elsewhere (e.g. in another application)
    owasp_appsensor: []
    owasp_asvs: []
    owasp_scp: []
    safecode: []
    value: '5'
  - capec: [54, 98, 164]
    cre: [513-183]
    description: Aaron can bypass controls because error/exception handling is missing,
      or is implemented inconsistently or partially, or does not deny access by default
      (i.e. errors should terminate access/execution), or relies on handling by some
      other service or system
    owasp_appsensor: []
    owasp_asvs: [8.2, 8.4]
    owasp_scp: [109, 110, 111, 112, 155]
    safecode: [4, 11, 23]
    value: '6'
  - capec: [93]
    cre: [402-706]
    description: Mwengu's actions cannot be investigated because there is not an adequate
      accurately time-stamped record of security events, or there is not a full audit
      trail, or these can be altered or deleted by Mwengu, or there is no centralized
      logging service
    owasp_appsensor: []
    owasp_asvs: [2.12, 8.3, 8.4, 8.5, 8.6, 8.7, 8.8, 8.9, 8.1, 8.11, 8.12, 9.1, 10.4]
    owasp_scp: [113, 114, 115, 117, 118, 121, 122, 123, 124, 125, 126, 127, 128, 129,
      130]
    safecode: [4]
    value: '7'
  - capec: [37, 220, 310, 436, 536]
    cre: [724-770]
    description: David can bypass the application to gain access to data because the
      network and host infrastructure, and supporting services/applications, have
      not been securely configured, the configuration rechecked periodically and security
      patches applied, or the data is stored locally, or the data is not physically
      protected
    owasp_appsensor: [RE1, RE2]
    owasp_asvs: [19.1, 19.4, 19.6, 19.7, 19.8]
    owasp_scp: [151, 152, 156, 160, 161, 173, 174, 175, 176, 177]
    safecode: []
    value: '8'
  - capec: [122, 233]
    cre: [152-725]
    description: Michael can bypass the application to gain access to data because
      administrative tools or administrative interfaces are not secured adequately
    owasp_appsensor: []
    owasp_asvs: [2.1, 2.32]
    owasp_scp: [23, 29, 56, 81, 82, 84, 85, 86, 87, 88, 89, 90]
    safecode: []
    value: '9'
  - capec: [68, 438, 439, 442, 524, 538]
    cre: [613-285]
    description: Xavier can circumvent the application's controls because code frameworks,
      libraries and components contain malicious code or vulnerabilities (e.g. in-house,
      commercial off the shelf, outsourced, open source, externally-located)
    owasp_appsensor: []
    owasp_asvs: [1.11]
    owasp_scp: [57, 151, 152, 204, 205, 213, 214]
    safecode: [15]
    value: '10'
  - capec: []
    cre: [180-488]
    description: Roman can exploit the application because it was compiled using out-of-date
      tools, or its configuration is not secure by default, or security information
      was not documented and passed on to operational teams
    owasp_appsensor: []
    owasp_asvs: [19.5, 19.9]
    owasp_scp: [90, 137, 148, 151, 152, 153, 154, 175, 176, 177, 178, 179, 186, 192]
    safecode: [4]
    value: J
  - capec: []
    cre: [418-853, TODO: missing CRE for response]
    description: Jim can undertake malicious, non-normal, actions without real-time
      detection and response by the application
    owasp_appsensor: [(All)]
    owasp_asvs: [4.14, 9.8, 15.1, 15.2]
    owasp_scp: []
    safecode: [1, 27]
    value: Q
  - capec: [2, 25, 119, 125]
    cre: [623-550]
    description: Gareth can utilize the application to deny service to some or all
      of its users
    owasp_appsensor: [UT1-4, STE3]
    owasp_asvs: []
    owasp_scp: [41, 55]
    safecode: [1]
    value: K
  name: Cornucopia
