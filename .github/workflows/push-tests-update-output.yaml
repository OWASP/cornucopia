name: Run Tests and Update output files
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches:
      - master
      - dev
    paths:
      - 'sources/**'
      - 'scripts/convert**'
      - 'resources/templates/**'
  pull_request:
    branches:
      - master
      - dev
    paths:
      - 'sources/**'
      - 'scripts/convert**'
      - 'resources/templates/**'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
permissions:
  contents: read

jobs:
  runtests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      # Make sure we have some code to test
      - name: Harden Runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969 # v2.4.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      # Set the pip environment up
      - name: Get Python
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: '3.10'
          cache: 'pipenv' # caching pip dependencies
      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install --ignore-pipfile --dev
      # Run the tests
      - name: Run unit tests
        run: pipenv run python -m unittest discover -s "tests/scripts" -p "*_utest.py"
      - name: Run integration
        run: pipenv run python -m unittest discover -s "tests/scripts" -p "*_itest.py"
      # Test coverage reports
      - name: Check test coverage - run tests
        run: pipenv run coverage run -m unittest discover -s "tests/scripts" -p "*_*test.py"
      - name: Check test coverage - generate xml
        run: pipenv run coverage xml
      - name: Check test coverage - Report
        run: pipenv run coverage report --fail-under 85 scripts/convert*
      # Check formatting of files
      - name: Check formatting of files with Black
        run: pipenv run black --line-length=120 --check .
      - name: Check formatting of files with flake
        run: pipenv run flake8 --max-line-length=120 --max-complexity=10 --ignore=E203,W503
      - name: Check formatting of files for correct spelling and namespace names
        run: pipenv run mypy --namespace-packages --strict ./scripts/

  # If Tests pass, generate new output files and commit to repo
  updateoutputfiles:
    permissions:
      contents: write  # for Git to git push
    name: Update Output Files
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    needs: runtests
    steps:
      # Make sure we have some code to diff.
      - name: Harden Runner
        uses: step-security/harden-runner@128a63446a954579617e875aaab7d2978154e969 # v2.4.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout repository
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      # Set the pip environment up
      - name: Get Python
        uses: actions/setup-python@d27e3f3d7c64b4bbf8e4abfb9b63b83e846e0435 # v4.5.0
        with:
          python-version: '3.10'
          cache: 'pipenv' # caching pip dependencies
      - name: Install dependencies
        run: |
          pip install pipenv
          pipenv install -d

      - name: Generate new output files
        run: pipenv run python scripts/convert.py -l all -t all -s all

      # Set the git username and email up.
      - name: setup git config
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions@github.com"
      - name: Commit changes back into git repo
        run: |
          git add scripts/**
          git add output/**
          git commit -m "Github Actions updated output files"
          git pull
          git push
